import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import io
import math
import base64
import requests 
from plotly.subplots import make_subplots 
from PIL import Image
from io import BytesIO


# --- ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö (Page Config) ---
st.set_page_config(layout="wide")

# --- ‚úÖ ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô ---
col1, col2 = st.columns([1, 10])

with col1:
    st.image("https://raw.githubusercontent.com/daemuktnant-MFC/streamlit-assets/main/Rider_pic.png", width=80)

with col2:
    # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å st.title ‡πÄ‡∏õ‡πá‡∏ô st.header ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Å‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏ß‡∏≤‡∏á
    # ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ st.markdown("<h1 style='margin-top: 0;'>MFC SD Monitoring Dashboard</h1>", unsafe_allow_html=True)
    # ‡πÅ‡∏ï‡πà st.header ‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏ß‡∏≤‡∏á‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô
    st.header("MFC SD Monitoring Dashboard")

# üí• ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏û‡∏¥‡πà‡∏° verify=False ‡πÉ‡∏ô requests.get() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ SSL üí•
def get_base64_image(img_source): 
    data = None
    image_format = "png" # Default format

    if img_source.startswith("http"):
        # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô URL (Web Link)
        try:
            # üí• ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏û‡∏¥‡πà‡∏° verify=False ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á SSLError üí•
            response = requests.get(img_source, timeout=10, verify=False) 
            response.raise_for_status() # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            data = response.content
            # ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏î‡∏∂‡∏á‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å URL
            format_ext = img_source.split('.')[-1].lower()
            if format_ext in ['png', 'jpg', 'jpeg', 'gif']:
                 image_format = format_ext.replace('jpg', 'jpeg')
        except requests.exceptions.RequestException as e:
            st.error(f"Error downloading image from URL: {img_source} - {e}") 
            st.warning("‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÄ‡∏Å‡∏¥‡∏î Error ‡∏≠‡∏µ‡∏Å ‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ú‡πà‡∏≤‡∏ô st.file_uploader ‡πÅ‡∏ó‡∏ô")
            return None, "png"
    else:
        # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô Local Path
        try:
            with open(img_source, "rb") as f:
                data = f.read()
            format_ext = img_source.split('.')[-1].lower()
            if format_ext in ['png', 'jpg', 'jpeg', 'gif']:
                 image_format = format_ext.replace('jpg', 'jpeg')
        except FileNotFoundError:
            st.error(f"Error: Local image file not found at {img_source}")
            return None, "png"

    if data:
        # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ Base64 ‡πÅ‡∏•‡∏∞‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏†‡∏≤‡∏û
        return base64.b64encode(data).decode(), image_format
    return None, "png"


# --- ‡∏ù‡∏±‡∏á‡∏£‡∏π‡∏õ‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå‡∏ñ‡∏≤‡∏ß‡∏£ (‡πÉ‡∏™‡πà URL ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î) ---
# üí• ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ Raw Link (‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö https://raw.githubusercontent.com/...)
ROBOT_IMAGE_URL = "https://raw.githubusercontent.com/daemuktnant-MFC/streamlit-assets/main/Robot_pic.png" 
robot_base64, robot_format = get_base64_image(ROBOT_IMAGE_URL) # üí• ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ Base64 ‡πÅ‡∏•‡∏∞ Format

# üí• ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°: Custom CSS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö KPI üí•
st.markdown("""
<style>
/* ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç KPI */
div[data-testid="stMetricValue"] {
    font-size: 40px; /* üí• ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç KPI ‡πÉ‡∏´‡∏ç‡πà‡∏Ç‡∏∂‡πâ‡∏ô */
    font-weight: bold;
}
/* ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ KPI */
div[data-testid="stMetricLabel"] {
    font-size: 16px; /* üí• ‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ KPI ‡πÉ‡∏´‡∏ç‡πà‡∏Ç‡∏∂‡πâ‡∏ô */
}
</style>
""", unsafe_allow_html=True)
# üí• ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î Custom CSS üí•

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î ---
@st.cache_data
def load_data(uploaded_file):
    try:
        # ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
        df = pd.read_excel(uploaded_file, engine='openpyxl')
        return df
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel: {e}")
        st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡πá‡∏ô .xlsx ‡∏´‡∏£‡∏∑‡∏≠ .xls ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        return None

# --- Sidebar ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå ---
st.sidebar.header("Upload File")
uploaded_file = st.sidebar.file_uploader(
    "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå Excel (.xlsx, .xls)", 
    type=["xlsx", "xls"]
)

# --- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ---
if uploaded_file is not None:
    
    df = load_data(uploaded_file)

    if df is not None:

        # --- ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì KPIs ---
        total_orders = df['Order ID'].nunique()
        total_value = df['Net Order Value'].sum()
        rounded_total_value = math.ceil(total_value) # üí• ‡∏õ‡∏±‡∏î Total Value ‡∏Ç‡∏∂‡πâ‡∏ô
        total_complete = df[df['Status'] == 'COMPLETE'].shape[0]
        total_on_process = total_orders - total_complete # üí• ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì On Process
        total_unsuccessful = df[df['Status'] == 'UNSUCCESSFUL ON DEMAND DELIVERY'].shape[0]
        total_riders = df['Rider Name'].nunique()

        # --- ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• KPIs (‡πÅ‡∏ñ‡∏ß‡∏ö‡∏ô‡∏™‡∏∏‡∏î) - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏õ‡πá‡∏ô 7 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå ---
        kpi_col1, kpi_col2, kpi_col3, kpi_col4, kpi_col5, kpi_col6, kpi_col7 = st.columns(7)

        with kpi_col1:
            st.metric(label="Total Order", value=f"{total_orders:,}")
        with kpi_col2:
            st.metric(label="Total Complete", value=f"{total_complete:,}")
        with kpi_col3:
            st.metric(label="On Process", value=f"{total_on_process:,}")
        with kpi_col4:
            st.metric(label="Total Cancel", value=f"{total_unsuccessful:,}")
        with kpi_col5:
            st.metric(label="Total Rider", value=f"{total_riders:,}")
        with kpi_col6:
            st.metric(label="Total Value", value=f"{rounded_total_value:,}") # üí• ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏î‡πÅ‡∏•‡πâ‡∏ß
        with kpi_col7:
            # üí• ‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå‡∏à‡∏≤‡∏Å‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô ‡πÅ‡∏ï‡πà‡∏õ‡∏£‡∏±‡∏ö width ‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö kpi_col7 (200px ‡πÅ‡∏ó‡∏ô 300px)
            if robot_base64:
                st.markdown(
                    f"""
                    <div style='text-align:center'>
                        <img src='data:image/{robot_format};base64,{robot_base64}' width='500'> 
                    </div>
                    """,
                    unsafe_allow_html=True,
                )
            else:
                st.info("No Image")


        # --- ‡∏™‡∏£‡πâ‡∏≤‡∏á Divider ---
        st.markdown("---")

        # --- ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≤‡∏ü ---
        
        # 1. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Over SLA KPI (KPI DOT Chart)
        
        # ‡∏Å‡∏£‡∏≠‡∏á Order ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà 'CANCEL' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì KPI ‡πÅ‡∏•‡∏∞ Rider Chart
        df_non_cancel = df[df['Status'] != 'CANCEL'].copy()
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Order ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Cancel
        total_orders_non_cancel = df_non_cancel['Order ID'].nunique()
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Order ‡∏ó‡∏µ‡πà 'Over SLA' ‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Cancel
        over_sla_orders = df_non_cancel[df_non_cancel['SLA STS'] == 'Over SLA']['Order ID'].nunique()
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô
        if total_orders_non_cancel > 0:
            over_sla_rate = (over_sla_orders / total_orders_non_cancel) * 100
        else:
            over_sla_rate = 0.0
            
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç (Over SLA Rate ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0 ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÅ‡∏î‡∏á ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô)
        display_color = 'red' if over_sla_rate > 0 else 'blue'
        
        # 2. ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≤‡∏ü Rider (‡πÉ‡∏ä‡πâ df_non_cancel)
        rider_order_counts = df_non_cancel.groupby('Rider Name')['Order ID'].nunique().reset_index()
        rider_order_counts.columns = ['Rider Name', 'Total Orders']
        rider_order_counts = rider_order_counts.sort_values(by='Total Orders', ascending=False)
        rider_order_counts = rider_order_counts.dropna(subset=['Rider Name'])

        # --- ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏£‡∏≤‡∏ü (‡πÅ‡∏ñ‡∏ß‡∏Å‡∏•‡∏≤‡∏á) - ‡∏õ‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏õ‡πá‡∏ô (1, 2) ---
        chart_col1, chart_col2 = st.columns((1, 2))

        # ‡∏Å‡∏£‡∏≤‡∏ü‡∏ß‡∏á‡∏Å‡∏•‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö SLA Status ---
        with chart_col1:
            if 'SLA STS' in df.columns:
                
                # --- 1. ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 'Cancel' ‡∏≠‡∏≠‡∏Å ---
                # ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà 'Cancel' ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏ô‡∏µ‡πâ
                df_sla_filtered = df[df['SLA STS'] != 'Cancel']['SLA STS'].dropna()

                # --- 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á Map ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏ß‡∏°‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ---
                # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ 'Within SLA', 'Pending', 'Dispatched' ‡∏ñ‡∏π‡∏Å‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô 'DOT'
                # 'Over SLA' ‡∏à‡∏∞‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÄ‡∏õ‡πá‡∏ô 'Over SLA'
                replacement_map = {
                    'Within SLA': 'DOT',
                    'Pending': 'DOT',
                    'Dispatched': 'DOT'
                }
                
                # --- 3. ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ Map ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ---
                # ‡πÉ‡∏ä‡πâ .replace() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏° ‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏∂‡∏á .value_counts()
                sla_mapped = df_sla_filtered.replace(replacement_map)
                sla_counts = sla_mapped.value_counts().reset_index()
                sla_counts.columns = ['SLA STS', 'Count']
                
                # --- 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á Pie chart (‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà Map ‡πÅ‡∏•‡πâ‡∏ß) ---
                fig_sla_pie = px.pie(
                    sla_counts,
                    names='SLA STS',    # ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏°‡∏µ‡πÅ‡∏Ñ‡πà '% DOT' ‡πÅ‡∏•‡∏∞ 'Over SLA'
                    values='Count',
                    hole=0.4, # ‡∏Å‡∏£‡∏≤‡∏ü‡πÇ‡∏î‡∏ô‡∏±‡∏ó
                    color='SLA STS',
                    color_discrete_map={ # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏µ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
                        'DOT': '#0099FF',      # ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
                        'Over SLA': '#d62728'   # ‡∏™‡∏µ‡πÅ‡∏î‡∏á
                    }
                )

                # ... (Code lines for creating fig_sla_pie)

                # --- 5. ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• ---
                fig_sla_pie.update_traces(
                    textposition='inside',
                    textinfo='percent+label',
                    rotation=270,
                    pull=[0.05 if s == 'Over SLA' else 0 for s in sla_counts['SLA STS']],
                    textfont=dict(size=40),
                    marker=dict(
                        line=dict(color='#000000', width=1)
                    )
                )
                # ‚¨áÔ∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏¢‡∏∑‡πâ‡∏≠‡∏á (Indentation) ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô
                fig_sla_pie.update_layout(
                    legend_title_text='‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞',
                    margin=dict(t=0, b=0, l=0, r=0)
                )

                # 6. ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÉ‡∏ô Streamlit
                st.plotly_chart(fig_sla_pie, use_container_width=True)

            else:
                st.warning("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏ß‡∏á‡∏Å‡∏•‡∏°‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 'SLA STS'")

        # ‡∏Å‡∏£‡∏≤‡∏ü‡∏ó‡∏µ‡πà 2: Total Order by Rider (‡∏à‡∏∞‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô)
        with chart_col2:
            st.subheader("Total Order by Rider (Top 20)")
            
            top_riders = rider_order_counts.head(20)
            
            fig_rider_bar = px.bar(
                top_riders,
                x='Total Orders',  
                y='Rider Name',    
                orientation='h',    
                text='Total Orders', 
                labels={'Total Orders': 'Number of Orders', 'Rider Name': 'Rider Name'},
                color='Total Orders', 
                color_continuous_scale=px.colors.sequential.Teal
            )
            
            fig_rider_bar.update_layout(yaxis={'categoryorder':'total ascending'})
            
            fig_rider_bar.update_traces(
                textposition='inside',
                textangle=0,
                insidetextanchor='start', 
                insidetextfont=dict(color='#FF9933')
            )
            
            st.plotly_chart(fig_rider_bar, use_container_width=True)

        # --- ‡∏™‡∏£‡πâ‡∏≤‡∏á Divider ---
        st.markdown("---")

        # --- ‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ó‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á (Stacked by SLA Status) ---
        st.subheader("Status Order by Hour")

        if 'Hours' in df.columns and 'SLA STS' in df.columns:
            
            # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô string ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Plotly ‡∏°‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô category
            df['Hours'] = df['Hours'].astype(str)
            
            df_hourly = df.groupby(['Hours', 'SLA STS']).size().reset_index(name='Count')
            df_hourly_total = df_hourly.groupby('Hours')['Count'].sum().reset_index(name='TotalCount')

            # --- ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡πÄ‡∏ß‡∏•‡∏≤ ---
            # 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏á (08, 09, 10, ... 18)
            # ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 'Hours', ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô int, ‡πÄ‡∏£‡∏µ‡∏¢‡∏á, ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏õ‡∏•‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô str
            unique_hours = df['Hours'].unique()
            sorted_hours = sorted([int(h) for h in unique_hours])
            sorted_hours_str = [str(h) for h in sorted_hours]
            # üí• ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á df_hourly_total ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÅ‡∏Å‡∏ô X
            df_hourly_total['Hours'] = pd.Categorical(df_hourly_total['Hours'], categories=sorted_hours_str, ordered=True)
            df_hourly_total = df_hourly_total.sort_values('Hours')

            # --- ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏µ‡πÉ‡∏´‡∏°‡πà ---
            color_map = {
                'Within SLA': '#0099FF',      
                'Over SLA': '#FF3300',        
                'Dispatched': '#CC00FF',    
                'Pending': '#8ED973',        
                'Cancel': '#B2B2B2'          
            }

            # 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á Figure ‡∏î‡πâ‡∏ß‡∏¢ Subplots ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Secondary Y-Axis
            fig_hourly = make_subplots(specs=[[{"secondary_y": True}]])

            # 2. ‡πÄ‡∏û‡∏¥‡πà‡∏° Bar Traces (Stacked Column) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö SLA Status
            sla_statuses = ['Within SLA', 'Over SLA', 'Dispatched', 'Pending', 'Cancel']
    
            for status in sla_statuses:
                df_status = df_hourly[df_hourly['SLA STS'] == status]
                if not df_status.empty:
                    fig_hourly.add_trace(
                        go.Bar(
                            x=df_status['Hours'],
                            y=df_status['Count'],
                            name=status,
                            marker_color=color_map.get(status, '#B2B2B2'),
                            text=df_status['Count'],
                            # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                            textposition='inside',
                            textangle=0
                        ),
                        secondary_y=False, # ‡πÉ‡∏ä‡πâ‡πÅ‡∏Å‡∏ô Y ‡∏´‡∏•‡∏±‡∏Å (‡∏ã‡πâ‡∏≤‡∏¢)
                    )

            # 3. ‡πÄ‡∏û‡∏¥‡πà‡∏° Line Trace (Scatter) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Total Order (‡πÅ‡∏Å‡∏ô Y ‡∏£‡∏≠‡∏á)
            fig_hourly.add_trace(
                go.Scatter(
                    x=df_hourly_total['Hours'],
                    y=df_hourly_total['TotalCount'],
                    name='Total',
                    mode='lines+markers+text',
                    line=dict(color='#FFCC66', width=4, shape='spline'),
                    marker=dict(size=10, color='white', line=dict(width=2, color='#00CCCC')),
                    text=df_hourly_total['TotalCount'],
                    textposition='top center',
                    textfont=dict(color='black', size=16), # üí• ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ Total
                ),
                secondary_y=True, # üí• ‡πÉ‡∏ä‡πâ‡πÅ‡∏Å‡∏ô Y ‡∏£‡∏≠‡∏á (‡∏Ç‡∏ß‡∏≤)
            )

            # 4. ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á Layout ‡πÅ‡∏•‡∏∞ Axes
    
            # üí• ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Stacked Bar
            fig_hourly.update_layout(barmode='stack')
    
            # üí• ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÄ‡∏â‡∏û‡∏≤‡∏∞ 'Within SLA' (Trace ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà 0 ‡∏´‡∏≤‡∏Å Within SLA ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)
            # ‡πÄ‡∏£‡∏≤‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠ trace ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
            fig_hourly.update_traces(
                selector=dict(name='Within SLA', type='bar'), 
                textposition='inside',
                textfont=dict(size=20) # üí• ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ Within SLA
            )

           # üí• ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏•‡∏≥‡∏î‡∏±‡∏ö X-Axis ‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡∏ô
            fig_hourly.update_xaxes(
                type='category',
                categoryorder='array',
                categoryarray=sorted_hours_str,
                title_text='Hour of Day'
            )
    
           # üí• ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÅ‡∏Å‡∏ô Y ‡∏´‡∏•‡∏±‡∏Å (‡∏ã‡πâ‡∏≤‡∏¢)
            fig_hourly.update_yaxes(
                title_text="Number of Orders (SLA Status)", 
                secondary_y=False,
                # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Y-axis range ‡πÉ‡∏´‡πâ Total Order ‡∏≠‡∏¢‡∏π‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô (‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö max_y ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á)
                range=[0, df_hourly_total['TotalCount'].max() * 1.5] 
            )
    
            # üí• ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÅ‡∏Å‡∏ô Y ‡∏£‡∏≠‡∏á (‡∏Ç‡∏ß‡∏≤)
            fig_hourly.update_yaxes(
                title_text="Total Order", 
                secondary_y=True,
                showgrid=False, # ‡∏ã‡πà‡∏≠‡∏ô Grid line ‡∏Ç‡∏≠‡∏á‡πÅ‡∏Å‡∏ô‡∏£‡∏≠‡∏á
                title_standoff=10,
                # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Range ‡πÉ‡∏´‡πâ‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Å‡∏±‡∏ö‡πÅ‡∏Å‡∏ô Y ‡∏´‡∏•‡∏±‡∏Å ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏™‡πâ‡∏ô‡∏î‡∏π‡πÅ‡∏ö‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
                showticklabels=False, # üëà ‡∏ã‡πà‡∏≠‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡πÅ‡∏Å‡∏ô Y ‡∏£‡∏≠‡∏á
                range=[0, df_hourly_total['TotalCount'].max() * 1.15] 
            )
            
            # üí• ‡∏õ‡∏£‡∏±‡∏ö Layout ‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏° (‡πÄ‡∏û‡∏¥‡πà‡∏° Legend)
            fig_hourly.update_layout(
                barmode='stack',
                # üí• ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏¢‡πâ‡∏≤‡∏¢ Legend ‡πÑ‡∏õ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡∏Ç‡∏ß‡∏≤
                margin=dict(t=50, r=120),
                legend=dict(
                    orientation="v",
                    yanchor="top",
                    y=1, # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ö‡∏ô‡∏™‡∏∏‡∏î
                    xanchor="right",
                    x=1.1 # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏ß‡∏≤‡∏™‡∏∏‡∏î (‡∏ô‡∏≠‡∏Å‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢)
                )
            )

            st.plotly_chart(fig_hourly, use_container_width=True)

        else:
            st.warning("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏£‡∏≤‡∏¢‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 'Hours' ‡∏´‡∏£‡∏∑‡∏≠ 'SLA STS'")

        # --- (‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å) ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö ---
        with st.expander("‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö (Raw Data)"):
            st.dataframe(df)

else:
    # --- ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå ---
    st.info("üëã ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà Sidebar ‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")




