import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import io

# --- ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö (Page Config) ---
st.set_page_config(
    page_title="SD Monitoring Dashboard",
    page_icon="üìä",
    layout="wide"
)

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î ---
@st.cache_data
def load_data(uploaded_file):
    try:
        # ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
        df = pd.read_excel(uploaded_file, engine='openpyxl')
        return df
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel: {e}")
        st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡πá‡∏ô .xlsx ‡∏´‡∏£‡∏∑‡∏≠ .xls ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        return None

# --- Sidebar ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå ---
st.sidebar.header("Upload File")
uploaded_file = st.sidebar.file_uploader(
    "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå Excel (.xlsx, .xls)", 
    type=["xlsx", "xls"]
)

# --- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ---
if uploaded_file is not None:
    
    df = load_data(uploaded_file)

    if df is not None:
        
        # --- ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡∏≠‡∏á Dashboard ---
        st.title("üìä SD Monitoring Dashboard")

        # --- ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì KPIs ---
        total_orders = df['Order ID'].nunique()
        total_value = df['Net Order Value'].sum()
        total_complete = df[df['Status'] == 'COMPLETE'].shape[0]
        total_unsuccessful = df[df['Status'] == 'UNSUCCESSFUL ON DEMAND DELIVERY'].shape[0]
        
        total_riders = df['Rider Name'].nunique()

        # --- ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• KPIs (‡πÅ‡∏ñ‡∏ß‡∏ö‡∏ô‡∏™‡∏∏‡∏î) - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏õ‡πá‡∏ô 5 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå ---
        kpi_col1, kpi_col2, kpi_col3, kpi_col4, kpi_col5 = st.columns(5)

        with kpi_col1:
            st.metric(label="Total Order", value=f"{total_orders:,}")
        
        with kpi_col2:
            st.metric(label="Total Value", value=f"{total_value:,.2f}")
        
        with kpi_col3:
            st.metric(label="Total Complete", value=f"{total_complete:,}")
        
        with kpi_col4:
            st.metric(label="Total Cancel", value=f"{total_unsuccessful:,}")
        
        # --- (‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà) ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• Total Rider ---
        with kpi_col5:
            st.metric(label="Total Rider", value=f"{total_riders:,}")


        # --- ‡∏™‡∏£‡πâ‡∏≤‡∏á Divider ---
        st.markdown("---")

        # --- ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≤‡∏ü ---
        payment_counts = df['Payment Code'].value_counts().reset_index()
        payment_counts.columns = ['Payment Code', 'Count']
        
        rider_order_counts = df.groupby('Rider Name')['Order ID'].nunique().reset_index()
        rider_order_counts.columns = ['Rider Name', 'Total Orders']
        rider_order_counts = rider_order_counts.sort_values(by='Total Orders', ascending=False)
        rider_order_counts = rider_order_counts.dropna(subset=['Rider Name'])

        # --- ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏£‡∏≤‡∏ü (‡πÅ‡∏ñ‡∏ß‡∏Å‡∏•‡∏≤‡∏á) - ‡∏õ‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏õ‡πá‡∏ô (1, 2) ---
        chart_col1, chart_col2 = st.columns((1, 2)) 
        
        # ‡∏Å‡∏£‡∏≤‡∏ü‡∏ó‡∏µ‡πà 1: Total Order by Payment (‡∏à‡∏∞‡πÄ‡∏•‡πá‡∏Å‡∏•‡∏á)
        with chart_col1:
            st.subheader("Total Order by Payment")
            fig_payment = px.pie(payment_counts, names='Payment Code', values='Count', hole=0.3)
            fig_payment.update_traces(textposition='inside', textinfo='percent+label')
            st.plotly_chart(fig_payment, use_container_width=True)

        # ‡∏Å‡∏£‡∏≤‡∏ü‡∏ó‡∏µ‡πà 2: Total Order by Rider (‡∏à‡∏∞‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô)
        with chart_col2:
            st.subheader("Total Order by Rider (Top 20)")
            
            top_riders = rider_order_counts.head(20)
            
            fig_rider_bar = px.bar(
                top_riders,
                x='Total Orders',  
                y='Rider Name',    
                orientation='h',   
                text='Total Orders', 
                labels={'Total Orders': 'Number of Orders', 'Rider Name': 'Rider Name'},
                color='Total Orders', 
                color_continuous_scale=px.colors.sequential.Teal
            )
            
            fig_rider_bar.update_layout(yaxis={'categoryorder':'total ascending'})
            
            fig_rider_bar.update_traces(
                textposition='inside',
                textangle=0,
                insidetextanchor='start', 
                insidetextfont=dict(color='#FF9933')
            )
            
            st.plotly_chart(fig_rider_bar, use_container_width=True)

        # --- ‡∏™‡∏£‡πâ‡∏≤‡∏á Divider ---
        st.markdown("---")

        # --- ‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ó‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á (Stacked by SLA Status) ---
        st.subheader("Total Order by Hour (Stacked by SLA Status)")

        if 'Hours' in df.columns and 'SLA STS' in df.columns:
            
            # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô string ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Plotly ‡∏°‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô category
            df['Hours'] = df['Hours'].astype(str)
            
            df_hourly = df.groupby(['Hours', 'SLA STS']).size().reset_index(name='Count')
            df_hourly_total = df_hourly.groupby('Hours')['Count'].sum().reset_index(name='TotalCount')

            # --- ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡πÄ‡∏ß‡∏•‡∏≤ ---
            # 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏á (08, 09, 10, ... 18)
            # ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 'Hours', ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô int, ‡πÄ‡∏£‡∏µ‡∏¢‡∏á, ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏õ‡∏•‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô str
            unique_hours = df['Hours'].unique()
            sorted_hours = sorted([int(h) for h in unique_hours])
            sorted_hours_str = [str(h) for h in sorted_hours]

            # --- ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏µ‡πÉ‡∏´‡∏°‡πà ---
            color_map = {
                'Within SLA': '#0066FF',     
                'Over SLA': '#FF3300',        
                'Dispatched': '#CC66FF',   
                'Pending': '#00FF00',        
                'Cancel': '#B2B2B2'         
            }

            fig_hourly = px.bar(
                df_hourly,
                x='Hours',
                y='Count',
                color='SLA STS',
                text='Count',
                labels={'Hours': 'Hour of Day', 'Count': 'Number of Orders'},
                color_discrete_map=color_map 
            )
            fig_hourly.update_traces(textposition='inside',textangle=0)

            fig_hourly.add_trace(go.Scatter(
                x=df_hourly_total['Hours'],
                y=df_hourly_total['TotalCount'],
                text=df_hourly_total['TotalCount'],
                mode='text',
                textposition='top center',
                textfont=dict(color='black', size=14),
                showlegend=False
            ))
            
            max_y = df_hourly_total['TotalCount'].max() * 1.15
            fig_hourly.update_layout(
                yaxis_range=[0, max_y],
                xaxis={
                    'type': 'category',
                    # 2. ‡πÉ‡∏ä‡πâ sorted_hours_str ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
                    'categoryorder': 'array',
                    'categoryarray': sorted_hours_str 
                }
            )

            st.plotly_chart(fig_hourly, use_container_width=True)

        else:
            st.warning("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏£‡∏≤‡∏¢‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 'Hours' ‡∏´‡∏£‡∏∑‡∏≠ 'SLA STS'")

        # --- (‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å) ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö ---
        with st.expander("‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö (Raw Data)"):
            st.dataframe(df)

else:
    # --- ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå ---
    st.info("üëã ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà Sidebar ‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
